name: 'GCP Workload Identity Federation Authentication'
description: 'Authenticate with Google Cloud using Workload Identity Federation with optional JWT debugging'
branding:
  icon: 'cloud'
  color: 'blue'
inputs:
  workload_identity_provider:
    description: 'Workload Identity Provider resource name'
    required: true
  project_id:
    description: 'GCP Project ID'
    required: false
  service_account:
    description: 'Service account email to impersonate'
    required: false
  setup_gcloud:
    description: 'Install and configure gcloud SDK'
    required: false
    default: 'true'
  gcloud_version:
    description: 'Version of gcloud SDK to install'
    required: false
    default: 'latest'
  gcloud_components:
    description: 'Additional gcloud components to install (comma-separated)'
    required: false
    default: ''
  log_jwt_info:
    description: 'Log JWT token information for debugging'
    required: false
    default: 'true'
  verify_authentication:
    description: 'Verify authentication by running gcloud commands'
    required: false
    default: 'true'
  export_credentials:
    description: 'Export credentials to environment'
    required: false
    default: 'true'

outputs:
  credentials_path:
    description: 'Path to the generated credentials file'
    value: ${{ steps.auth.outputs.credentials_file_path || steps.auth-project.outputs.credentials_file_path || steps.auth-sa.outputs.credentials_file_path || steps.auth-both.outputs.credentials_file_path }}
  access_token:
    description: 'Access token for authenticated requests'
    value: ${{ steps.auth.outputs.access_token || steps.auth-project.outputs.access_token || steps.auth-sa.outputs.access_token || steps.auth-both.outputs.access_token }}
  project_id:
    description: 'GCP Project ID'
    value: ${{ steps.auth.outputs.project_id || steps.auth-project.outputs.project_id || steps.auth-sa.outputs.project_id || steps.auth-both.outputs.project_id }}

runs:
  using: "composite"
  steps:
    - name: Log JWT Information
      if: inputs.log_jwt_info == 'true'
      uses: github/actions-oidc-debugger@main
      with:
        audience: ${{ inputs.workload_identity_provider }}
    
    - name: Authenticate with Google Cloud (WIF only)
      if: inputs.project_id == '' && inputs.service_account == ''
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
    
    - name: Authenticate with Google Cloud (WIF + project)
      if: inputs.project_id != '' && inputs.service_account == ''
      id: auth-project
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        project_id: ${{ inputs.project_id }}
    
    - name: Authenticate with Google Cloud (WIF + service account)
      if: inputs.project_id == '' && inputs.service_account != ''
      id: auth-sa
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        service_account: ${{ inputs.service_account }}
    
    - name: Authenticate with Google Cloud (WIF + both)
      if: inputs.project_id != '' && inputs.service_account != ''
      id: auth-both
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ inputs.workload_identity_provider }}
        project_id: ${{ inputs.project_id }}
        service_account: ${{ inputs.service_account }}
    
    - name: Set up Google Cloud SDK
      if: inputs.setup_gcloud == 'true'
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: ${{ inputs.gcloud_version }}
        install_components: ${{ inputs.gcloud_components }}
    
    - name: Verify GCP Authentication
      if: inputs.verify_authentication == 'true'
      shell: bash
      run: |
        echo "🔑 Checking GCP Authentication..."
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "📋 Authenticated Account:"
        echo "    $(gcloud auth list --format="table(status,account)" 2>/dev/null || echo "⚠️ No authenticated accounts found")"
        
        echo ""
        echo "🌐 Project Configuration:"
        PROJECT=$(gcloud config get-value project 2>/dev/null)
        if [ -n "$PROJECT" ]; then
          echo "    ✅ Current project: $PROJECT"
        else
          echo "    ⚠️ No project configured"
        fi
        
        echo ""
        echo "⚙️ Current Configuration:"
        echo "$(gcloud config list --format="yaml" 2>/dev/null | sed 's/^/    /' || echo "    ⚠️ Unable to retrieve configuration")"
        
        if [ -n "${{ inputs.service_account }}" ]; then
          echo ""
          echo "👤 Service Account:"
          echo "    ${{ inputs.service_account }}"
        fi
        
        echo ""
        echo "🔌 Enabled APIs:"
        if gcloud config get-value project &>/dev/null; then
          gcloud services list --enabled --format="table(NAME:label=API_NAME)" 2>/dev/null | sed 's/^/    /' || echo "    ⚠️ Unable to list APIs"
        else
          echo "    ⚠️ Project not set, unable to list APIs"
        fi
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        # Always exit with success as this is diagnostic only
        exit 0