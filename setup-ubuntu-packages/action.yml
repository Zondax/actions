name: 'Setup Ubuntu Packages'
description: 'Configure Ubuntu mirrors and install packages for faster, reliable CI builds'
branding:
  icon: 'download'
  color: 'orange'
inputs:
  enable_mirrors:
    description: 'Enable mirror configuration for faster downloads'
    required: false
    default: 'true'
  mirror_url:
    description: 'Primary mirror URL (e.g., https://mirror.init7.net/ubuntu/)'
    required: false
    default: 'https://mirror.init7.net/ubuntu/'
  backup_mirrors:
    description: 'Backup mirror URLs (comma-separated)'
    required: false
    default: 'https://mirror.math.princeton.edu/pub/ubuntu/,https://ftp.halifax.rwth-aachen.de/ubuntu/,https://mirrors.kernel.org/ubuntu/'
  packages:
    description: 'List of packages to install (YAML list or space-separated string)'
    required: false
    default: |
      - git
      - curl
  extra_packages:
    description: 'Additional packages to install (YAML list or space-separated string)'
    required: false
    default: ''
  update_cache:
    description: 'Run apt-get update before package installation'
    required: false
    default: 'true'
  ubuntu_version:
    description: 'Ubuntu version codename (auto-detected if empty)'
    required: false
    default: ''
  retry_count:
    description: 'Number of retry attempts for package installation'
    required: false
    default: '2'
  cache_timeout:
    description: 'Timeout in seconds for package operations'
    required: false
    default: '120'

outputs:
  mirror_configured:
    description: 'Whether mirrors were configured successfully'
    value: ${{ steps.run-script.outputs.configured }}
  packages_installed:
    description: 'List of successfully installed packages'
    value: ${{ steps.run-script.outputs.installed }}
  ubuntu_codename:
    description: 'Detected Ubuntu codename'
    value: ${{ steps.run-script.outputs.codename }}

runs:
  using: "composite"
  steps:
    - name: Run setup-ubuntu-packages script
      id: run-script
      shell: bash
      env:
        ENABLE_MIRRORS: ${{ inputs.enable_mirrors }}
        MIRROR_URL: ${{ inputs.mirror_url }}
        BACKUP_MIRRORS: ${{ inputs.backup_mirrors }}
        PACKAGES: ${{ inputs.packages }}
        EXTRA_PACKAGES: ${{ inputs.extra_packages }}
        UPDATE_CACHE: ${{ inputs.update_cache }}
        UBUNTU_VERSION: ${{ inputs.ubuntu_version }}
        RETRY_COUNT: ${{ inputs.retry_count }}
        CACHE_TIMEOUT: ${{ inputs.cache_timeout }}
      run: |
        set -euo pipefail
        
        # Check if we're root or have sudo
        SUDO=""
        if [ "$(id -u)" != "0" ] && command -v sudo >/dev/null 2>&1; then
          SUDO="sudo"
        fi
        
        # Check if ca-certificates is installed (needed for SSL verification)
        if ! dpkg -l ca-certificates 2>/dev/null | grep -q "^ii"; then
          echo "ca-certificates not found, installing for SSL verification..."
          $SUDO apt-get update -qq || true
          DEBIAN_FRONTEND=noninteractive $SUDO apt-get install -y --no-install-recommends ca-certificates
          echo "ca-certificates installed"
        fi
        
        # Normalize package lists - remove YAML list markers and newlines
        PACKAGES="$(echo "${PACKAGES}" | sed 's/^[[:space:]]*-[[:space:]]*//' | tr '\n' ' ')"
        EXTRA_PACKAGES="$(echo "${EXTRA_PACKAGES}" | sed 's/^[[:space:]]*-[[:space:]]*//' | tr '\n' ' ')"
        ALL_PACKAGES="$PACKAGES $EXTRA_PACKAGES"
        ALL_PACKAGES=$(echo "$ALL_PACKAGES" | xargs) # Trim whitespace
        
        # Update apt cache if requested
        if [ "$UPDATE_CACHE" = "true" ]; then
          echo "Updating package cache..."
          $SUDO apt-get update -qq || true
        fi
        
        # Install packages if any specified
        if [ -n "$ALL_PACKAGES" ]; then
          echo "Installing packages: $ALL_PACKAGES"
          DEBIAN_FRONTEND=noninteractive $SUDO apt-get install -y --no-install-recommends $ALL_PACKAGES
        fi
        
        # Set outputs
        if [ -n "${GITHUB_OUTPUT:-}" ]; then
          echo "packages_installed=$ALL_PACKAGES" >> "$GITHUB_OUTPUT"
        fi