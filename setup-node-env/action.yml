name: 'Setup Node.js Environment'
description: 'Setup Node.js with package manager (npm, yarn, pnpm, or bun) and install dependencies'
branding:
  icon: 'package'
  color: 'green'
inputs:
  node_version:
    description: 'Node.js version to install'
    required: false
    default: '22'
  package_manager:
    description: 'Package manager to use (npm, yarn, pnpm, or bun)'
    required: false
    default: 'npm'
  yarn_version:
    description: 'Yarn version to install'
    required: false
    default: 'latest'
  pnpm_version:
    description: 'PNPM version to install'
    required: false
    default: 'latest'
  bun_version:
    description: 'Bun version to install'
    required: false
    default: 'latest'
  install_deps:
    description: 'Install dependencies after setup'
    required: false
    default: 'true'
  working_directory:
    description: 'Working directory for package operations'
    required: false
    default: '.'
  cache_dependencies:
    description: 'Cache dependencies'
    required: false
    default: 'true'
  autoinit_env:
    description: 'Run env:init:ci script after installing dependencies'
    required: false
    default: 'false'
  allow_lockfile_modifications:
    description: 'Allow package managers to create or modify lockfiles'
    required: false
    default: 'true'
  use_volta:
    description: 'Use Volta instead of mise for Node.js management (deprecated)'
    required: false
    default: 'false'

outputs:
  pm:
    description: 'Package manager command'
    value: ${{ steps.set-pm.outputs.pm }}
  pm_run:
    description: 'Package manager run command'
    value: ${{ steps.set-pm.outputs.pm_run }}
  cache_hit:
    description: 'Whether the cache was hit'
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Install Volta
      if: inputs.use_volta == 'true'
      uses: volta-cli/action@v4
      with:
        node-version: ${{ inputs.node_version }}
    
    - name: Install mise
      if: inputs.use_volta != 'true'
      uses: jdx/mise-action@v2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js with mise
      if: inputs.use_volta != 'true'
      shell: bash
      run: |
        mise use --global node@${{ inputs.node_version }}
        mise install
    
    - name: Set package manager variables
      id: set-pm
      shell: bash
      run: |
        case "${{ inputs.package_manager }}" in
          bun)
            echo "pm=bun" >> $GITHUB_OUTPUT
            echo "pm_run=bun run" >> $GITHUB_OUTPUT
            ;;
          yarn)
            echo "pm=yarn" >> $GITHUB_OUTPUT
            echo "pm_run=yarn run" >> $GITHUB_OUTPUT
            ;;
          pnpm)
            echo "pm=pnpm" >> $GITHUB_OUTPUT
            echo "pm_run=pnpm run" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "pm=npm" >> $GITHUB_OUTPUT
            echo "pm_run=npm run" >> $GITHUB_OUTPUT
            ;;
        esac
    
    - name: Install all package managers with Volta
      if: inputs.use_volta == 'true'
      shell: bash
      run: |
        volta install yarn@${{ inputs.yarn_version }}
        volta install pnpm@${{ inputs.pnpm_version }}
        volta install bun@${{ inputs.bun_version }}
    
    - name: Install all package managers with mise
      if: inputs.use_volta != 'true'
      shell: bash
      run: |
        mise use --global yarn@${{ inputs.yarn_version }}
        mise use --global pnpm@${{ inputs.pnpm_version }}
        mise use --global bun@${{ inputs.bun_version }}
        mise install
    
    - name: Install dependencies
      if: inputs.install_deps == 'true'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        if [[ "${{ inputs.allow_lockfile_modifications }}" == "false" ]]; then
          case "${{ inputs.package_manager }}" in
            yarn)
              # For Yarn, use --immutable to prevent any lockfile changes
              ${{ steps.set-pm.outputs.pm }} install --immutable || ${{ steps.set-pm.outputs.pm }} install --frozen-lockfile
              ;;
            pnpm)
              ${{ steps.set-pm.outputs.pm }} install --frozen-lockfile
              ;;
            bun)
              ${{ steps.set-pm.outputs.pm }} install --frozen-lockfile
              ;;
            *)
              # npm - use ci command if package-lock.json exists
              if [[ -f "package-lock.json" ]]; then
                ${{ steps.set-pm.outputs.pm }} ci
              else
                echo "Warning: No package-lock.json found, using regular install"
                ${{ steps.set-pm.outputs.pm }} install
              fi
              ;;
          esac
        else
          # Allow modifications - normal install
          ${{ steps.set-pm.outputs.pm }} install
        fi
    
    - name: Initialize environment
      if: inputs.autoinit_env == 'true'
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        ${{ steps.set-pm.outputs.pm_run }} env:init:ci